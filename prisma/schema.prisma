// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String?
  lastName         String?
  role             Role      @default(CUSTOMER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  phone            String?
  address          Address?
  orders           Order[]
  sessions         Session[]
  passwordResetToken String?
  passwordResetExpires DateTime?
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Address {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String?
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  slug        String        @unique
  description String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  products    Product[]
}

model Tribe {
  id          String        @id @default(uuid())
  name        String        @unique
  slug        String        @unique
  description String?
  region      String?
  country     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  products    Product[]
}

model Product {
  id              String         @id @default(uuid())
  name            String
  slug            String         @unique
  description     String
  price           Decimal
  discountPrice   Decimal?
  stockQuantity   Int            @default(1)
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id])
  tribeId         String?
  tribe           Tribe?         @relation(fields: [tribeId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  images          ProductImage[]
  isAntique       Boolean        @default(false)
  origin          String?
  age             String?
  materials       String?
  dimensions      String?
  condition       String?
  authenticity    String?
  provenance      String?
  culturalContext String?
  isPublished     Boolean        @default(true)
  orderItems      OrderItem[]
  cartItems       CartItem[]
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  altText   String?
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  sessionId String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  total     Decimal    @default(0)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id               String      @id @default(uuid())
  userId           String
  user             User        @relation(fields: [userId], references: [id])
  status           OrderStatus @default(PENDING)
  total            Decimal
  paymentId        String?
  paymentMethod    String?
  paymentProviderOrderId String? 
  shippingAddress  Json?
  paymentResult Json?
  shippingMethod   String
  shippingCost     Decimal
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  items            OrderItem[]
  
  isPaid    Boolean @default(false)
  isShipped   Boolean @default(false)
  isDelivered Boolean @default(false)
  paidAt        DateTime?   @map("paid_at")
  paymentIntent    String?
  paypalOrderId    String?
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  name       String
  price      Decimal
  quantity   Int
  totalPrice Decimal
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}